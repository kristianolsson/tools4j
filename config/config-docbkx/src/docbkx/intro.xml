<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>
<chapter id="intro">
  <title>Introduction</title>
  <para>
  </para>
  <section id="mission">
    <title>Mission statement and motivation</title>
    <para>The mission of the project  is to  minimize the complexity around being able to dynamically  manage change   of behaviour for highly-available and long running server-side applications in a reliable and predictable way. </para>
    <para>A key goal is to maximise developer and operator productivity by   unifying the way configuration is used and managed for Java-based enterprise applications.</para>
    <para>Applications are not required to run  Java SE, EE, OSGi, Spring, CDI or 
 any other runtime environment, programming model or framework. The aim is to integrate seamlessly with all of those without affecting  application interfaces.</para>
  </section>
  <section id="overview">
    <title>Overview</title>
    <emphasis role="italic">
      <para>&quot;Maintenance typically consumes about 40 to 80 percent (60 percent average) of software costs. Therefore, it is probably the most important life cycle phase.&quot;

    </para>
      <para><ulink url="http://www.eng.auburn.edu/~hendrix/comp6710/readings/Forgotten_Fundamentals_IEEE_Software_May_2001.pdf">Frequently Forgotten Fundamental Facts about Software Engineering</ulink> </para>
    </emphasis>
    <para>In some sense maintenance can be seen as a measure for preventing unintended change and defects through preventive measures and repairs. </para>
    <para>One aspect of successful business is to be able change rapidly.  But change is also related to difficulties, risks,  and costs.  Clearly more so in dynamic and elastic Cloud Computing environments where scale, diversity and complexity suddenly become painfully obvious when trying to change applications.   </para>
  </section>
  <section id="features">
    <title>Features</title>
    <para>To fill a relevant need in the community and dynamically be able to manage configuration we believe that the following goals should be pursued. </para>
    <para><itemizedlist>
        <listitem>
          <para>Productivity and Simplicity</para>
          <para>Introducing and managing configuration must be intuitive and non-intrusive in order to support developer productivity.  </para>
          <para>Developers can reuse configuration not caring where and how it is stored, if it is valid, how to cache and keep it consistent. Configuration is strongly-typed and loosely coupled.</para>
        </listitem>
        <listitem><para>Predictability and Clarity</para>It is possible to declaratively express the intents and rules under which configuration is valid. Violations are handled in a consistent and predictable way that does not affect application behaviour. Changes are applied and exposed to applications reliably.</listitem>
        <listitem>
          <para>Extendability and Portability</para>
          <para>A diversity of  applications  in different shapes and sizes  running different platforms and technologies are anticipated to be supported.  Applications will have the freedom and flexibility to locally extend and customize a variety aspects and still be able to manage configuration in a central and unified way.</para>
        </listitem>
        <listitem>
          <para>Performance and Scalability</para>
          <para>Configuration must be quickly accessible to be able to meet service-level agreements in environments of  scale.</para>
        </listitem>
      </itemizedlist></para>
  </section>
  <section>
    <title>Terminology</title>
    <para>Configuration is a very general term that may have different meaning depending on who  you ask and there is little meaning   in trying to categorize the ambiguity  between configuration and provisioning data.</para>
    <para>It is however useful to agree on a set of principles and constraints that this data have, which  we broadly call  configuration, in order to put things in perspective.</para>
    <itemizedlist>
      <listitem>
        <para>Configuration is considered read-mostly data. Changes are made by human application operators/administrators having different roles in the organization that provide the application. </para>
      </listitem>
      <listitem>
        <para>Configuration never change from  events triggered by machine-to-machine communication or end-users/customers interaction with the application.</para>
      </listitem>
      <listitem>
        <para>Configuration is considered read-only from an application developer perspective.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Design</title>
    <para><mediaobject>
        <imageobject role="fo">
          <imagedata align="center" fileref="resources/images/design.png" format="PNG"/>
        </imageobject>
        <imageobject role="html">
          <imagedata align="center" fileref="images/design.png" format="PNG"/>
        </imageobject>
        <caption>
          <para>High Level Architecture</para>
        </caption>
      </mediaobject></para>
  </section>
</chapter>
